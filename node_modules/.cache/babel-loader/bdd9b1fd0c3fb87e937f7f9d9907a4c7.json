{"ast":null,"code":"var _jsxFileName = \"/Users/yanguangjing/Downloads/snu-infovis-assn-1-skeleton-master 2/src/components/Mainplot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Mainplot = props => {\n  _s();\n\n  const splotSvg = useRef(null);\n  const barplotSvg = useRef(null);\n  const svgSize = props.margin * 2 + props.size; // TODO\n  //dino plot\n\n  useEffect(() => {\n    // TODO\n    //dataset\n    let datasetX = props.data.map(d => d[0]);\n    let datasetY = props.data.map(d => d[1]); //define axisX\n\n    let linearX = d3.scaleLinear().domain([d3.min(datasetX), d3.max(datasetX)]).range([0, props.size]);\n    let axisX = d3.axisBottom(linearX); //define axisY\n\n    let linearY = d3.scaleLinear().domain([d3.min(datasetY), d3.max(datasetY)]).range([props.size, 0]);\n    let axisY = d3.axisLeft(linearY); //append axisX\n\n    const svg = d3.select(splotSvg.current);\n    svg.append(\"g\").attr(\"transform\", `translate(${props.margin},${props.size + props.margin})`).call(axisX); //append axisY\n\n    svg.append(\"g\").attr(\"transform\", `translate(${props.margin},${props.margin})`).call(axisY); //append dot\n\n    const dotSvg = svg.append(\"g\").attr(\"transform\", `translate(${props.margin},${props.margin})`);\n    dotSvg.selectAll(\"circle\").data(props.data).enter().append(\"circle\").attr(\"class\", (_, i) => `circle${i}`).attr(\"r\", props.radius).attr(\"cx\", d => linearX(d[0])).attr(\"cy\", d => linearY(d[1])); //append brush\n\n    const brush = d3.brush().extent([[0, 0], [props.size, props.size]]).on(\"start brush end\", brushed); //.on(\"start\", cleared);\n\n    let inSectionId = [];\n    const brushSvg = svg.append(\"g\").attr(\"transform\", `translate(${props.margin},${props.margin})`).call(brush); // function cleared(){\n    // \td3.selectAll(\"circle\").attr(\"fill\",\"black\");\n    // }\n\n    function brushed(event) {\n      let selection = event.selection;\n      let [[x0, y0], [x1, y1]] = selection;\n      console.log(`x0:${x0},y0:${y0},x1:${x1},y1:${y1}`); // brush none dot\n\n      if (selection == null) {\n        d3.selectAll(\"circle\").attr(\"fill\", \"black\");\n        return;\n      } //transfer data\n\n\n      const dataT = props.data.map((d, i) => {\n        const dataTX = linearX(parseFloat(d[0]));\n        const dataTY = linearY(parseFloat(d[1]));\n\n        if (x0 <= dataTX && dataTX <= x1 && y0 <= dataTY && dataTY <= y1) {\n          //const selected = d3.select(`.circle${i}`).attr(\"fill\", \"red\");//\n          inSectionId.push(i);\n          console.log(inSectionId);\n        }\n\n        inSectionId.forEach(e => {\n          console.log(inSectionId);\n          d3.select(`.circle${e}`).attr(\"fill\", \"red\");\n        });\n      });\n    }\n\n    d3.selectAll(\"circle\").attr(\"fill\", \"black\"); // eslint-disable-next-line\n  }, []); //bar plot\n\n  useEffect(() => {//define axisX\n    // let linearX = d3.scaleLinear().domain([d3.min(datasetX), d3.max(datasetX)]).range([0, props.size]);\n    // let axisX = d3.axisBottom(linearX);\n    // //define axisY\n    // let linearY = d3.scaleLinear().domain([d3.min(datasetY), d3.max(datasetY)]).range([props.size, 0]);\n    // let axisY = d3.axisLeft(linearY);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: splotSvg,\n      width: svgSize,\n      height: svgSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: barplotSvg,\n      width: svgSize,\n      height: svgSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Mainplot, \"gVqVbQICJLzbwptZdq7jglYFjfg=\");\n\n_c = Mainplot;\nexport default Mainplot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mainplot\");","map":{"version":3,"sources":["/Users/yanguangjing/Downloads/snu-infovis-assn-1-skeleton-master 2/src/components/Mainplot.js"],"names":["React","useRef","useEffect","d3","Mainplot","props","splotSvg","barplotSvg","svgSize","margin","size","datasetX","data","map","d","datasetY","linearX","scaleLinear","domain","min","max","range","axisX","axisBottom","linearY","axisY","axisLeft","svg","select","current","append","attr","call","dotSvg","selectAll","enter","_","i","radius","brush","extent","on","brushed","inSectionId","brushSvg","event","selection","x0","y0","x1","y1","console","log","dataT","dataTX","parseFloat","dataTY","push","forEach","e"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect} from \"react\";\nimport * as d3 from \"d3\";\n\n\n\nconst Mainplot = (props) => {\n\n\tconst splotSvg = useRef(null);\n  const barplotSvg = useRef(null);\n  const svgSize = props.margin * 2 + props.size;\n\n  // TODO\n\n\t//dino plot\n\tuseEffect(() => {\n    // TODO\n\n\t\t//dataset\n\t\tlet datasetX = props.data.map(d => d[0]);\n\t\tlet datasetY = props.data.map(d => d[1]);\n\n\t\t//define axisX\n\t\tlet linearX = d3.scaleLinear().domain([d3.min(datasetX), d3.max(datasetX)]).range([0, props.size]);\n\t\tlet axisX = d3.axisBottom(linearX);\n\n\t\t//define axisY\n\t\tlet linearY = d3.scaleLinear().domain([d3.min(datasetY), d3.max(datasetY)]).range([props.size, 0]);\n\t\tlet axisY = d3.axisLeft(linearY);\n\n\t\t//append axisX\n\t\tconst svg = d3.select(splotSvg.current);\n\t\tsvg.append(\"g\")\n\t \t\t .attr(\"transform\", `translate(${props.margin},${props.size + props.margin})`)\n\t\t\t .call(axisX)\n\n\t\t//append axisY\n\t\tsvg.append(\"g\")\n\t\t\t .attr(\"transform\", `translate(${props.margin},${props.margin})`)\n\t\t\t .call(axisY)\n\n\t\t//append dot\n\t\tconst dotSvg = svg.append(\"g\")\n\t\t\t\t\t\t\t\t\t\t\t.attr(\"transform\", `translate(${props.margin},${props.margin})`)\n\t\tdotSvg.selectAll(\"circle\")\n\t\t\t\t\t.data(props.data)\n\t\t\t\t\t.enter()\n\t\t\t\t\t.append(\"circle\")\n\t\t\t\t\t.attr(\"class\", (_,i) => `circle${i}`)\n\t\t\t\t\t.attr(\"r\", props.radius)\n\t\t\t\t\t.attr(\"cx\", d => linearX(d[0]))\n\t\t\t\t\t.attr(\"cy\", d => linearY(d[1]))\n\n\n\t\t//append brush\n\t\tconst brush = d3.brush()\n      .extent([[0, 0], [props.size, props.size]])\n      .on(\"start brush end\", brushed)\n\t\t\t//.on(\"start\", cleared);\n\n\t\tlet inSectionId = [];\n\t\tconst brushSvg = svg.append(\"g\")\n\t\t\t\t\t\t\t\t\t\t\t\t.attr(\"transform\", `translate(${props.margin},${props.margin})`)\n\t\t\t\t\t\t\t\t\t\t\t\t.call(brush)\n\n\t\t// function cleared(){\n\t\t// \td3.selectAll(\"circle\").attr(\"fill\",\"black\");\n\t\t// }\n\n\n\t\tfunction brushed(event) {\n    let selection = event.selection;\n\t\tlet [[x0, y0],[x1, y1]] = selection;\n\t\tconsole.log(`x0:${x0},y0:${y0},x1:${x1},y1:${y1}`)\n\t\t// brush none dot\n    if (selection == null) {\n      d3.selectAll(\"circle\").attr(\"fill\", \"black\");\n      return;\n    }\n\t\t//transfer data\n\t\tconst dataT = props.data.map((d, i)=>{\n\t\t\tconst dataTX = linearX(parseFloat(d[0]));\n\t\t\tconst dataTY = linearY(parseFloat(d[1]));\n\t\t\tif(x0 <= dataTX && dataTX <= x1 && y0 <= dataTY && dataTY <= y1)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t//const selected = d3.select(`.circle${i}`).attr(\"fill\", \"red\");//\n\t\t\t\tinSectionId.push(i);\n\t\t\t\tconsole.log(inSectionId);\n\t\t\t}\n\t\t\tinSectionId.forEach(e =>{\n\t\t\t\tconsole.log(inSectionId);\n\t\t\t\td3.select(`.circle${e}`)\n\t\t\t\t\t.attr(\"fill\",\"red\");\n\t\t\t} )\n\t\t});\n  }\n\td3.selectAll(\"circle\").attr(\"fill\",\"black\");\n\t\n\t// eslint-disable-next-line\n\t}, []);\n\n\t//bar plot\n\tuseEffect(()=>{\n\n\t\t//define axisX\n\t\t// let linearX = d3.scaleLinear().domain([d3.min(datasetX), d3.max(datasetX)]).range([0, props.size]);\n\t\t// let axisX = d3.axisBottom(linearX);\n\n\t\t// //define axisY\n\t\t// let linearY = d3.scaleLinear().domain([d3.min(datasetY), d3.max(datasetY)]).range([props.size, 0]);\n\t\t// let axisY = d3.axisLeft(linearY);\n\n\t},[])\n\n\treturn (\n\t\t<div>\n\t\t\t<svg ref={splotSvg} width={svgSize} height={svgSize}> \n\t\t\t</svg>\n      <svg ref={barplotSvg} width={svgSize} height={svgSize}> \n\t\t\t</svg>\n\n\t\t</div>\n\t)\n};\n\nexport default Mainplot;"]},"metadata":{},"sourceType":"module"}